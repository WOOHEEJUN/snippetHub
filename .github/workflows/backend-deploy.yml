name: Deploy Backend to EC2

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-deploy.yml'
  workflow_dispatch:

jobs:
  deploy-backend:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: 'gradle'
        
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
        
    - name: Build backend with Gradle
      working-directory: ./backend
      run: |
        chmod +x ./gradlew
        ./gradlew build -x test --no-daemon
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        
    - name: Upload JAR to S3
      run: |
        ls -la backend/build/libs/
        aws s3 cp backend/build/libs/api-0.0.1-SNAPSHOT.jar s3://${{ secrets.S3_BUCKET }}/snippethub-backend.jar
        
    - name: Setup SSH
      run: |
        echo "${{ secrets.EC2_SSH_KEY }}" | tr -d '\r' > ~/snippethub-key.pem
        chmod 600 ~/snippethub-key.pem
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts 2>/dev/null || true
        ssh-keyscan -H 10.0.3.74 >> ~/.ssh/known_hosts 2>/dev/null || true
        ls -la ~/snippethub-key.pem
        echo "SSH key content (first 50 chars):"
        head -c 50 ~/snippethub-key.pem
        echo ""
        echo "SSH key setup completed"
        
    - name: Test SSH connection
      run: |
        echo "Testing SSH connection to NAT instance..."
        ssh -o StrictHostKeyChecking=no -i ~/snippethub-key.pem ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} "echo 'NAT instance connection successful'"
        
    - name: Deploy to EC2
      run: |
        ssh -o StrictHostKeyChecking=no -i ~/snippethub-key.pem -J ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} ${{ secrets.EC2_USERNAME }}@10.0.3.74 << 'EOF'
          # Stop existing application
          sudo systemctl stop snippethub-backend || true
          
          # Create app directory if not exists
          mkdir -p ~/app
          
          # Download new JAR from S3
          aws s3 cp s3://${{ secrets.S3_BUCKET }}/snippethub-backend.jar ~/app/snippethub-backend.jar
          
          # Create systemd service file if not exists
          sudo tee /etc/systemd/system/snippethub-backend.service > /dev/null << 'SERVICEEOF'
          [Unit]
          Description=SnippetHub Backend Application
          After=network.target
          
          [Service]
          Type=simple
          User=ubuntu
          WorkingDirectory=/home/ubuntu/app
          ExecStart=/usr/bin/java -jar /home/ubuntu/app/snippethub-backend.jar
          Restart=always
          RestartSec=10
          
          [Install]
          WantedBy=multi-user.target
          SERVICEEOF
          
          # Reload systemd and start service
          sudo systemctl daemon-reload
          sudo systemctl enable snippethub-backend
          sudo systemctl start snippethub-backend
          
          # Check service status
          sudo systemctl status snippethub-backend
        EOF
        
    - name: Verify deployment
      run: |
        sleep 30
        echo "Checking ALB health endpoint..."
        curl -f https://snippethub-alb-120890630.ap-northeast-2.elb.amazonaws.com/actuator/health || exit 1
        
    - name: Deploy success
      run: echo "Backend deployed successfully to ALB"
